[user]
	email = Alexander.Ames@gmail.com
	name = Alexander Ames

[init]
	defaultBranch = main

[include]
	path = ~/.gitconfig.local

[core]
	excludesFile = ~/.gitignore_global
	pager = delta

[url "git@github.com:"]
	insteadOf = https://github.com/

[push]
	autoSetupRemote = true
	default = current

[pull]
	rebase = true

[diff]
	tool = vimdiff

[difftool "bc"]
	trustExitCode = true

[difftool "vimdiff"]
	cmd = vim -f -d -c 'wincmd l' -c 'cd "$GIT_PREFIX"' "$LOCAL" "$REMOTE"

[difftool]
	prompt = false

[alias]
	# Diffing.
	d = diff
	dt = difftool
	mt = mergetool

	# Add.
	a = add
	aa = add .

	# Commit.
	c = commit
	ca = commit -a
	cm = commit -m
	cam = commit -a -m

	checkpoint = commit -a -m "Checkpoint"

	# Amend commits, (in|ex)cluding everything, (with|without) message update.
	amend = commit --amend
	m = commit --amend --no-edit
	ma = commit --amend -a --no-edit

	# Check out remote branch.
	track = checkout --track
	t = checkout --track
	track-all = "!for remote in `git branch -r | grep -v /HEAD`; do git checkout --track $remote ; done"
	ta = track-all

	# Pretty log printers.
	lg             = log       --decorate --color --graph --pretty=format:'%C(bold blue)%h%Creset - %Cgreen(%cr)%Creset %s %C(bold blue)<%an>%C(auto)%d%Creset' --abbrev-commit
	l              = log       --decorate --color         --pretty=format:'%C(bold blue)%h%Creset - %Cgreen(%cr)%Creset %s %C(bold blue)<%an>%C(auto)%d%Creset' --abbrev-commit
	la             = log --all --decorate --color         --pretty=format:'%C(bold blue)%h%Creset - %Cgreen(%cr)%Creset %s %C(bold blue)<%an>%C(auto)%d%Creset' --abbrev-commit
	log-graph-main = log       --decorate --color --graph --pretty=format:'%C(bold blue)%h%Creset - %Cgreen(%cr)%Creset %s %C(bold blue)<%an>%C(auto)%d%Creset' --abbrev-commit HEAD...main

	# Commands that should exist
	get-branch = rev-parse --abbrev-ref HEAD
	get-tracked-remote = !git branch -vv | rg --color never \"(\\w+)/$(git get-branch)\" -or '$1'
	branch-new = checkout -b
	new-branch = checkout -b

	# Utilities that print and get commits.
	simple-log = log --all --pretty=format:'%h %s <%an>'
	# branch-ls = for-each-ref --format='%(refname:short)' refs/heads/
	branch-ls = !git branch -a | cut -c 3- | sed s-^remotes/--
	ls-branch = !git branch -a | cut -c 3- | sed s-^remotes/--
	mk-branch = !git checkout -b
	make-branch = !git checkout -b

	recent-files = diff --name-only HEAD..HEAD~3

	# fzf enabled commands
	fzf = !fzf -i --reverse --height=~50%
	# cp  = !git simple-log | git fzf    --bind 'enter:become(git cherry-pick $({1} | awk '{print $1}\')'
	p   = !git remote    | git fzf -1 --bind 'enter:become(git push         {1})'
	pf  = !git remote    | git fzf -1 --bind 'enter:become(git push --force {1})'
	b   = !git branch-ls | git fzf    --bind 'enter:become(git checkout     {1})'
	rb  = !git branch-ls | git fzf    --bind 'enter:become(git rebase       {1})'
	co  = "!git checkout $(git branch-ls | git fzf | awk '{print $1}')"
	sw = "!git switch $(git branch-ls | git fzf | awk '{print $1}')"

	prd = "!if git merge-base --is-ancestor main HEAD; then git diff main HEAD; else echo \"not branched from main; run \\`git rebase main\\`\"; fi"

[interactive]
	diffFilter = delta --color-only --features=interactive

[delta]
	features = decorations
	side-by-side = true
	whitespace-error-style = 22 reverse
  navigate = true  # use n and N to move between diff sections

[delta "interactive"]
	keep-plus-minus-markers = false

[delta "decorations"]
	commit-decoration-style = blue ol
	commit-style = raw
	file-style = omit
	hunk-header-decoration-style = grey ol ul
	hunk-header-file-style = white
	hunk-header-line-number-style = "#067a00"
	hunk-header-style = file line-number syntax
	hunk-label = "     │ File: "
	line-numbers-left-format = "{nm:>4} │"
	line-numbers-left-style = grey
	line-numbers-right-format = "│{np:>4} │"
	line-numbers-right-style = grey

# [merge]
#   conflictstyle = zdiff3

[remote]
	pushDefault = origin

