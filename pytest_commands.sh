

function pytest-tests {
  python ~/.vscode-server/extensions/ms-python.python-2023.4.1/pythonFiles/testing_tools/run_adapter.py discover pytest -- --rootdir . -s --cache-clear --dist=loadfile -nauto
  # python $(dirname $BASH_SOURCE[0])/run_adapter.py discover pytest -- --rootdir . -s --cache-clear --dist=loadfile -nauto
}

# This is a quick function I wrote to make using pytest easier to use.
# It works by taking the list of tests generated by calling
# `pytest --collect-only`, and then feeding it to fzf, which allows you to
# select the test(s) to run and pass them to pytest itself.
# This script supports calling test based on unit test name, test class, test
# file, or test directory.
function pyt {
  local fzf_bind=
  case "$1" in
    test | t)
      pytest-tests                                                            \
        | jq -r '.[0].tests[] | "\(.source) \(.id)"'                          \
        | sed 's/^\([^ ]\+\) [^:]\+::\([^:]\+\)::\([^:]\+\).*$/\2:\3:\1/;t;d' \
        | fzf -i                                                              \
              --reverse                                                       \
              --height ~50%                                                   \
              --delimiter :                                                   \
              --prompt 'test> '                                               \
              --preview 'bat --color always                                   \
                             --style numbers                                  \
                             --line-range {4}:                                \
                             --highlight-line {4}                             \
                             {3}'                                             \
              --bind 'enter:become(pytest -W ignore::DeprecationWarning {3}::{1}::{2})'
      ;;
    # TODO: See if there's a way to change the bind action so that its easier to
    # change how the search works.
    # --header 'Search by [t]est, [c]lass, [f]ile, or [d]irectory'    \
    # --bind 'ctrl-d:change-prompt(directory> )+reload())'
    class | c)
      pytest --collect-only --quiet                              \
        | grep '[^:]\+::[^:]\+::[^:]\+'                          \
        | sed 's/^\([^:]\+\)::\([^:]\+\)::\([^:]\+\).*$/\1::\2/' \
        | sort --unique                                          \
        | fzf -i                                                 \
              --reverse                                          \
              --height ~50%                                      \
              --delimiter ::                                     \
              --bind 'enter:become(pytest -W ignore::DeprecationWarning {1}::{2})'
      ;;
    file | f | module | m)
      pytest --collect-only --quiet                          \
        | grep '[^:]\+::[^:]\+::[^:]\+'                      \
        | sed 's/^\([^:]\+\)::\([^:]\+\)::\([^:]\+\).*$/\1/' \
        | sort --unique                                      \
        | fzf -i                                             \
              --reverse                                      \
              --height ~50%                                  \
              --delimiter ::                                 \
              --bind 'enter:become(pytest -W ignore::DeprecationWarning {1})'
      ;;
    directory | dir | d)
      pytest --collect-only --quiet                          \
        | grep '[^:]\+::[^:]\+::[^:]\+'                      \
        | sed 's/^\([^:]\+\)::\([^:]\+\)::\([^:]\+\).*$/\1/' \
        | xargs dirname                                      \
        | sort --unique                                      \
        | fzf -i                                             \
              --reverse                                      \
              --height ~50%                                  \
              --delimiter ::                                 \
              --bind 'enter:become(pytest -W ignore::DeprecationWarning {1})'
      ;;
    *)
      echo 'Use one of:'
      echo '  function func fn'
      echo '  class c'
      echo '  file f module m'
      echo '  directory dir d'
    ;;
  esac
}
